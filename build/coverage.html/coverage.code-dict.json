{"/home/travis/build/npmtest/node-npmtest-listr/test.js":"/* istanbul instrument in package npmtest_listr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-listr/lib.npmtest_listr.js":"/* istanbul instrument in package npmtest_listr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_listr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_listr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-listr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-listr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_listr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_listr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_listr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_listr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_listr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_listr.__dirname + '/lib.npmtest_listr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr/index.js":"'use strict';\nconst Task = require('./lib/task');\nconst TaskWrapper = require('./lib/task-wrapper');\nconst renderer = require('./lib/renderer');\nconst ListrError = require('./lib/listr-error');\n\nconst runTask = (task, context, errors) => {\n\tif (!task.isEnabled()) {\n\t\treturn Promise.resolve();\n\t}\n\n\treturn new TaskWrapper(task, errors).run(context);\n};\n\nclass Listr {\n\n\tconstructor(tasks, opts) {\n\t\tif (tasks && !Array.isArray(tasks) && typeof tasks === 'object') {\n\t\t\topts = tasks;\n\t\t\ttasks = [];\n\t\t}\n\n\t\tif (tasks && !Array.isArray(tasks)) {\n\t\t\tthrow new TypeError('Expected an array of tasks');\n\t\t}\n\n\t\tthis._options = Object.assign({\n\t\t\tshowSubtasks: true,\n\t\t\tconcurrent: false,\n\t\t\trenderer: 'default',\n\t\t\tnonTTYRenderer: 'verbose'\n\t\t}, opts);\n\t\tthis._tasks = [];\n\t\tthis._RendererClass = renderer.getRenderer(this._options.renderer, this._options.nonTTYRenderer);\n\n\t\tthis.exitOnError = this._options.exitOnError;\n\n\t\tthis.add(tasks || []);\n\t}\n\n\t_checkAll(context) {\n\t\tfor (const task of this._tasks) {\n\t\t\ttask.check(context);\n\t\t}\n\t}\n\n\tget tasks() {\n\t\treturn this._tasks;\n\t}\n\n\tsetRenderer(value) {\n\t\tthis._RendererClass = renderer.getRenderer(value);\n\t}\n\n\tadd(task) {\n\t\tconst tasks = Array.isArray(task) ? task : [task];\n\n\t\tfor (const task of tasks) {\n\t\t\tthis._tasks.push(new Task(this, task, this._options));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\trender() {\n\t\tif (!this._renderer) {\n\t\t\tthis._renderer = new this._RendererClass(this._tasks, this._options);\n\t\t}\n\n\t\treturn this._renderer.render();\n\t}\n\n\trun(context) {\n\t\tthis.render();\n\n\t\tcontext = context || Object.create(null);\n\n\t\tconst errors = [];\n\n\t\tthis._checkAll(context);\n\n\t\tlet tasks;\n\t\tif (this._options.concurrent === true) {\n\t\t\ttasks = Promise.all(this._tasks.map(task => runTask(task, context, errors)));\n\t\t} else {\n\t\t\ttasks = this._tasks.reduce((promise, task) => promise.then(() => {\n\t\t\t\tthis._checkAll(context);\n\n\t\t\t\treturn runTask(task, context, errors);\n\t\t\t}), Promise.resolve());\n\t\t}\n\n\t\treturn tasks\n\t\t\t.then(() => {\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\tconst err = new ListrError('Something went wrong');\n\t\t\t\t\terr.errors = errors;\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tthis._renderer.end();\n\n\t\t\t\treturn context;\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\terr.context = context;\n\t\t\t\tthis._renderer.end(err);\n\t\t\t\tthrow err;\n\t\t\t});\n\t}\n}\n\nmodule.exports = Listr;\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr/lib/task.js":"'use strict';\nconst isStream = require('is-stream');\nconst isPromise = require('is-promise');\nconst streamToObservable = require('stream-to-observable');\nconst Subject = require('rxjs/Subject').Subject;\nconst renderer = require('./renderer');\nconst state = require('./state');\nconst utils = require('./utils');\nconst ListrError = require('./listr-error');\n\nconst defaultSkipFn = () => false;\n\nclass Task extends Subject {\n\n\tconstructor(listr, task, options) {\n\t\tsuper();\n\n\t\tif (!task) {\n\t\t\tthrow new TypeError('Expected a task');\n\t\t}\n\n\t\tif (typeof task.title !== 'string') {\n\t\t\tthrow new TypeError(`Expected property \\`title\\` to be of type \\`string\\`, got \\`${typeof task.title}\\``);\n\t\t}\n\n\t\tif (typeof task.task !== 'function') {\n\t\t\tthrow new TypeError(`Expected property \\`task\\` to be of type \\`function\\`, got \\`${typeof task.task}\\``);\n\t\t}\n\n\t\tif (task.skip && typeof task.skip !== 'function') {\n\t\t\tthrow new TypeError(`Expected property \\`skip\\` to be of type \\`function\\`, got \\`${typeof task.skip}\\``);\n\t\t}\n\n\t\tif (task.enabled && typeof task.enabled !== 'function') {\n\t\t\tthrow new TypeError(`Expected property \\`enabled\\` to be of type \\`function\\`, got \\`${typeof task.enabled}\\``);\n\t\t}\n\n\t\tthis._listr = listr;\n\t\tthis._options = options || {};\n\t\tthis._subtasks = [];\n\t\tthis._output = undefined;\n\t\tthis._enabledFn = task.enabled;\n\t\tthis._isEnabled = true;\n\n\t\tthis.title = task.title;\n\t\tthis.skip = task.skip || defaultSkipFn;\n\t\tthis.task = task.task;\n\t}\n\n\tget output() {\n\t\treturn this._output;\n\t}\n\n\tget subtasks() {\n\t\treturn this._subtasks;\n\t}\n\n\tset state(state) {\n\t\tthis._state = state;\n\n\t\tthis.next({\n\t\t\ttype: 'STATE'\n\t\t});\n\t}\n\n\tget state() {\n\t\treturn state.toString(this._state);\n\t}\n\n\tcheck(ctx) {\n\t\t// Check if a task is enabled or disabled\n\t\tif (this._state === undefined && this._enabledFn) {\n\t\t\tconst isEnabled = this._enabledFn(ctx);\n\n\t\t\tif (this._isEnabled !== isEnabled) {\n\t\t\t\tthis._isEnabled = isEnabled;\n\n\t\t\t\tthis.next({\n\t\t\t\t\ttype: 'ENABLED',\n\t\t\t\t\tdata: isEnabled\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thasSubtasks() {\n\t\treturn this._subtasks.length > 0;\n\t}\n\n\tisPending() {\n\t\treturn this._state === state.PENDING;\n\t}\n\n\tisSkipped() {\n\t\treturn this._state === state.SKIPPED;\n\t}\n\n\tisCompleted() {\n\t\treturn this._state === state.COMPLETED;\n\t}\n\n\tisEnabled() {\n\t\treturn this._isEnabled;\n\t}\n\n\thasFailed() {\n\t\treturn this._state === state.FAILED;\n\t}\n\n\trun(context, wrapper) {\n\t\tconst handleResult = result => {\n\t\t\t// Detect the subtask\n\t\t\tif (utils.isListr(result)) {\n\t\t\t\tresult._options = Object.assign(this._options, result._options);\n\n\t\t\t\tresult.exitOnError = result._options.exitOnError;\n\n\t\t\t\tresult.setRenderer(renderer.getRenderer('silent'));\n\t\t\t\tthis._subtasks = result.tasks;\n\n\t\t\t\tthis.next({\n\t\t\t\t\ttype: 'SUBTASKS'\n\t\t\t\t});\n\n\t\t\t\treturn result.run(context);\n\t\t\t}\n\n\t\t\t// Detect stream\n\t\t\tif (isStream(result)) {\n\t\t\t\tresult = streamToObservable(result);\n\t\t\t}\n\n\t\t\t// Detect Observable\n\t\t\tif (utils.isObservable(result)) {\n\t\t\t\tresult = new Promise((resolve, reject) => {\n\t\t\t\t\tresult.subscribe({\n\t\t\t\t\t\tnext: data => {\n\t\t\t\t\t\t\tthis._output = data;\n\n\t\t\t\t\t\t\tthis.next({\n\t\t\t\t\t\t\t\ttype: 'DATA',\n\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: reject,\n\t\t\t\t\t\tcomplete: resolve\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Detect promise\n\t\t\tif (isPromise(result)) {\n\t\t\t\treturn result.then(handleResult);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\treturn Promise.resolve()\n\t\t\t.then(() => {\n\t\t\t\tthis.state = state.PENDING;\n\t\t\t\treturn this.skip(context);\n\t\t\t})\n\t\t\t.then(skipped => {\n\t\t\t\tif (skipped) {\n\t\t\t\t\tif (typeof skipped === 'string') {\n\t\t\t\t\t\tthis._output = skipped;\n\t\t\t\t\t}\n\t\t\t\t\tthis.state = state.SKIPPED;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn handleResult(this.task(context, wrapper));\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (this.isPending()) {\n\t\t\t\t\tthis.state = state.COMPLETED;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tthis.state = state.FAILED;\n\n\t\t\t\tif (err instanceof ListrError) {\n\t\t\t\t\twrapper.report(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._output = err.message;\n\n\t\t\t\tthis.next({\n\t\t\t\t\ttype: 'DATA',\n\t\t\t\t\tdata: err.message\n\t\t\t\t});\n\n\t\t\t\twrapper.report(err);\n\n\t\t\t\tif (this._listr.exitOnError !== false) {\n\t\t\t\t\t// Do not exit when explicitely set to `false`\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// Mark the Observable as completed\n\t\t\t\tthis.complete();\n\t\t\t});\n\t}\n}\n\nmodule.exports = Task;\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr/lib/renderer.js":"'use strict';\nconst renderers = {\n\tsilent: require('listr-silent-renderer'),\n\tverbose: require('listr-verbose-renderer'),\n\tdefault: require('listr-update-renderer')\n};\n\nconst isRendererSupported = renderer => process.stdout.isTTY === true || renderer.nonTTY === true;\n\nconst getRendererClass = renderer => {\n\tif (typeof renderer === 'string') {\n\t\treturn renderers[renderer] || renderers.default;\n\t}\n\n\treturn typeof renderer === 'function' ? renderer : renderers.default;\n};\n\nexports.getRenderer = (renderer, fallbackRenderer) => {\n\tlet ret = getRendererClass(renderer);\n\n\tif (!isRendererSupported(ret)) {\n\t\tret = getRendererClass(fallbackRenderer);\n\n\t\tif (!ret || !isRendererSupported(ret)) {\n\t\t\tret = renderers.verbose;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr-silent-renderer/index.js":"'use strict';\nclass SilentRenderer {\n\tstatic get nonTTY() {\n\t\treturn true;\n\t}\n\trender() { }\n\tend() {\t}\n}\n\nmodule.exports = SilentRenderer;\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr-verbose-renderer/index.js":"'use strict';\nconst figures = require('figures');\nconst cliCursor = require('cli-cursor');\nconst utils = require('./lib/utils');\n\nconst renderHelper = (task, event, options) => {\n\tconst log = utils.log.bind(undefined, options);\n\n\tif (event.type === 'STATE') {\n\t\tconst message = task.isPending() ? 'started' : task.state;\n\n\t\tlog(`${task.title} [${message}]`);\n\n\t\tif (task.isSkipped() && task.output) {\n\t\t\tlog(`${figures.arrowRight} ${task.output}`);\n\t\t}\n\t} else if (event.type === 'DATA') {\n\t\tlog(`${figures.arrowRight} ${event.data}`);\n\t} else if (event.type === 'TITLE') {\n\t\tlog(`${task.title} [title changed]`);\n\t}\n};\n\nconst render = (tasks, options) => {\n\tfor (const task of tasks) {\n\t\ttask.subscribe(\n\t\t\tevent => {\n\t\t\t\tif (event.type === 'SUBTASKS') {\n\t\t\t\t\trender(task.subtasks, options);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trenderHelper(task, event, options);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t);\n\t}\n};\n\nclass VerboseRenderer {\n\n\tconstructor(tasks, options) {\n\t\tthis._tasks = tasks;\n\t\tthis._options = Object.assign({\n\t\t\tdateFormat: 'HH:mm:ss'\n\t\t}, options);\n\t}\n\n\tstatic get nonTTY() {\n\t\treturn true;\n\t}\n\n\trender() {\n\t\tcliCursor.hide();\n\t\trender(this._tasks, this._options);\n\t}\n\n\tend() {\n\t\tcliCursor.show();\n\t}\n}\n\nmodule.exports = VerboseRenderer;\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr-verbose-renderer/lib/utils.js":"'use strict';\nconst chalk = require('chalk');\nconst format = require('date-fns/format');\n\nexports.log = (options, output) => {\n\tconst timestamp = format(new Date(), options.dateFormat);\n\n\tconsole.log(chalk.dim(`[${timestamp}]`) + ` ${output}`);\n};\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr-update-renderer/index.js":"'use strict';\nconst logUpdate = require('log-update');\nconst chalk = require('chalk');\nconst figures = require('figures');\nconst indentString = require('indent-string');\nconst cliTruncate = require('cli-truncate');\nconst stripAnsi = require('strip-ansi');\nconst utils = require('./lib/utils');\n\nconst renderHelper = (tasks, options, level) => {\n\tlevel = level || 0;\n\n\tlet output = [];\n\n\tfor (const task of tasks) {\n\t\tif (task.isEnabled()) {\n\t\t\tconst skipped = task.isSkipped() ? ` ${chalk.dim('[skipped]')}` : '';\n\n\t\t\toutput.push(indentString(` ${utils.getSymbol(task, options)} ${task.title}${skipped}`, level, '  '));\n\n\t\t\tif ((task.isPending() || task.isSkipped() || task.hasFailed()) && utils.isDefined(task.output)) {\n\t\t\t\tlet data = task.output;\n\n\t\t\t\tif (typeof data === 'string') {\n\t\t\t\t\tdata = stripAnsi(data.trim().split('\\n').filter(Boolean).pop());\n\n\t\t\t\t\tif (data === '') {\n\t\t\t\t\t\tdata = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utils.isDefined(data)) {\n\t\t\t\t\tconst out = indentString(`${figures.arrowRight} ${data}`, level, '  ');\n\t\t\t\t\toutput.push(`   ${chalk.gray(cliTruncate(out, process.stdout.columns - 3))}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((task.isPending() || task.hasFailed() || options.collapse === false) && (task.hasFailed() || options.showSubtasks !== false) && task.subtasks.length > 0) {\n\t\t\t\toutput = output.concat(renderHelper(task.subtasks, options, level + 1));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output.join('\\n');\n};\n\nconst render = (tasks, options) => {\n\tlogUpdate(renderHelper(tasks, options));\n};\n\nclass UpdateRenderer {\n\n\tconstructor(tasks, options) {\n\t\tthis._tasks = tasks;\n\t\tthis._options = Object.assign({\n\t\t\tshowSubtasks: true,\n\t\t\tcollapse: true\n\t\t}, options);\n\t}\n\n\trender() {\n\t\tif (this._id) {\n\t\t\t// Do not render if we are already rendering\n\t\t\treturn;\n\t\t}\n\n\t\tthis._id = setInterval(() => {\n\t\t\trender(this._tasks, this._options);\n\t\t}, 100);\n\t}\n\n\tend() {\n\t\tif (this._id) {\n\t\t\tclearInterval(this._id);\n\t\t\tthis._id = undefined;\n\t\t}\n\n\t\trender(this._tasks, this._options);\n\t\tlogUpdate.done();\n\t}\n}\n\nmodule.exports = UpdateRenderer;\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr-update-renderer/node_modules/indent-string/index.js":"'use strict';\nmodule.exports = (str, count, indent) => {\n\tindent = indent === undefined ? ' ' : indent;\n\tcount = count === undefined ? 1 : count;\n\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof str}\\``);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``);\n\t}\n\n\tif (typeof indent !== 'string') {\n\t\tthrow new TypeError(`Expected \\`indent\\` to be a \\`string\\`, got \\`${typeof indent}\\``);\n\t}\n\n\tif (count === 0) {\n\t\treturn str;\n\t}\n\n\treturn str.replace(/^(?!\\s*$)/mg, indent.repeat(count));\n};\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr-update-renderer/lib/utils.js":"'use strict';\nconst chalk = require('chalk');\nconst logSymbols = require('log-symbols');\nconst figures = require('figures');\nconst elegantSpinner = require('elegant-spinner');\n\nconst pointer = chalk.yellow(figures.pointer);\nconst skipped = chalk.yellow(figures.arrowDown);\n\nexports.isDefined = x => x !== null && x !== undefined;\n\nexports.getSymbol = (task, options) => {\n\tif (!task.spinner) {\n\t\ttask.spinner = elegantSpinner();\n\t}\n\n\tif (task.isPending()) {\n\t\treturn options.showSubtasks !== false && task.subtasks.length > 0 ? pointer : chalk.yellow(task.spinner());\n\t}\n\n\tif (task.isCompleted()) {\n\t\treturn logSymbols.success;\n\t}\n\n\tif (task.hasFailed()) {\n\t\treturn task.subtasks.length > 0 ? pointer : logSymbols.error;\n\t}\n\n\tif (task.isSkipped()) {\n\t\treturn skipped;\n\t}\n\n\treturn ' ';\n};\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr/lib/state.js":"'use strict';\nconst state = {\n\tPENDING: 0,\n\tCOMPLETED: 1,\n\tFAILED: 2,\n\tSKIPPED: 3\n};\n\nstate.toString = input => {\n\tswitch (input) {\n\t\tcase state.PENDING:\n\t\t\treturn 'pending';\n\t\tcase state.COMPLETED:\n\t\t\treturn 'completed';\n\t\tcase state.FAILED:\n\t\t\treturn 'failed';\n\t\tcase state.SKIPPED:\n\t\t\treturn 'skipped';\n\t\tdefault:\n\t\t\treturn 'unknown';\n\t}\n};\n\nmodule.exports = state;\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr/lib/utils.js":"'use strict';\n\nexports.isListr = obj => Boolean(obj && obj.setRenderer && obj.add && obj.run);\n// https://github.com/sindresorhus/is-observable/issues/1\nexports.isObservable = obj => Boolean(obj && typeof obj.subscribe === 'function' && obj.constructor.name === 'Observable');\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr/lib/listr-error.js":"'use strict';\nclass ListrError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = 'ListrError';\n\t}\n}\n\nmodule.exports = ListrError;\n","/home/travis/build/npmtest/node-npmtest-listr/node_modules/listr/lib/task-wrapper.js":"'use strict';\nconst state = require('./state');\nconst ListrError = require('./listr-error');\n\nclass TaskWrapper {\n\n\tconstructor(task, errors) {\n\t\tthis._task = task;\n\t\tthis._errors = errors;\n\t}\n\n\tset title(title) {\n\t\tthis._task.title = title;\n\n\t\tthis._task.next({\n\t\t\ttype: 'TITLE',\n\t\t\tdata: title\n\t\t});\n\t}\n\n\tget title() {\n\t\treturn this._task.title;\n\t}\n\n\treport(error) {\n\t\tif (error instanceof ListrError) {\n\t\t\tfor (const err of error.errors) {\n\t\t\t\tthis._errors.push(err);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._errors.push(error);\n\t\t}\n\t}\n\n\tskip(message) {\n\t\tif (message && typeof message !== 'string') {\n\t\t\tthrow new TypeError(`Expected \\`message\\` to be of type \\`string\\`, got \\`${typeof message}\\``);\n\t\t}\n\n\t\tif (message) {\n\t\t\tthis._task._output = message;\n\t\t}\n\n\t\tthis._task.state = state.SKIPPED;\n\t}\n\n\trun(ctx) {\n\t\treturn this._task.run(ctx, this);\n\t}\n}\n\nmodule.exports = TaskWrapper;\n"}